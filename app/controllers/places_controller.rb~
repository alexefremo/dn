class PlacesController < ApplicationController
  before_action :set_place, only: [:show, :edit, :update, :destroy]
  before_filter :authenticate_user!, only: [:new, :edit, :destroy]

  before_filter :authorize_user, only: [:new]
  before_filter :authorize_editor, only: [:edit, :destroy]

  def authorize_user
    unless current_user.right == "company" or current_user.right == "administrator" 
      redirect_to root_path, :notice => 'You are not authorized'
    end
  end

  def authorize_editor
    @userid = Place.find_by_slug!(params[:id]).user_id
    unless current_user.id == @userid.to_i
      redirect_to root_path, :notice => "It's not your content"
    end
  end

  def addid
    Subscription.create(user_id: current_user.id, place_id: params[:plid], user_gender: current_user.gender)    
    @places = Place.all
    @subs = Subscription.all
    @subscribed = Place.find_by_id(params[:plid])
    @subscribed.update_attributes(:subscribers_count => Subscription.where(place_id: params[:plid]).count)
    @subscribed.update_attributes(:subscribers_male => Subscription.where(place_id: params[:plid], user_gender: 'male').count)
    @subscribed.update_attributes(:subscribers_female => Subscription.where(place_id: params[:plid], user_gender: 'female').count)
    redirect_to :back
  end

  def delid
    @lolka = Subscription.where(user_id: current_user.id, place_id: params[:plid]).destroy_all
    redirect_to :back
  end


  # GET /places
  # GET /places.json
  def index
    @places = Place.sorted(params[:sort], "created_at DESC").page(params[:page]).per(4) 
    @news = News.all.order("created_at DESC").limit(4)
  end

  def query
    @types = PlaceType.find_by_slug!(params[:slug])
    @places = Place.where(place_type_id: @types.id).sorted(params[:sort], "created_at DESC").page(params[:page]).per(4)
    @news = News.all.order("created_at DESC").limit(4)
  end


  # GET /places/1
  # GET /places/1.json
  def show
    @places = Place.find_by_slug!(params[:id])
    @gallery = PlaceGallery.where(place_id: @places.id)
    @jobs = Job.where(place_id: @places.id)
    @news = News.all.order("created_at DESC").limit(4)
  end

  # GET /places/new
  def new
    @place = Place.new
    (9 - @place.place_galleries.length).times { @place.place_galleries.build }
    (5 - @place.jobs.length).times { @place.jobs.build }
  end

  # GET /places/1/edit
  def edit
    @place = Place.find_by_slug!(params[:id])
    (9 - @place.place_galleries.length).times { @place.place_galleries.build }
    (5 - @place.jobs.length).times { @place.jobs.build }
  end

  # POST /places
  # POST /places.json
  def create
    @place = Place.new(place_params)
    @place.user_id = current_user.id
    respond_to do |format|
      if @place.save
        format.html { redirect_to @place, notice: 'Place was successfully created.' }
        format.json { render action: 'show', status: :created, location: @place }
      else
        format.html { render action: 'new' }
        format.json { render json: @place.errors, status: :unprocessable_entity }
      end
    end
  end

  # PATCH/PUT /places/1
  # PATCH/PUT /places/1.json
  def update
    respond_to do |format|
      if @place.update(place_params)
        format.html { redirect_to @place, notice: 'Place was successfully updated.' }
        format.json { head :no_content }
      else
        format.html { render action: 'edit' }
        format.json { render json: @place.errors, status: :unprocessable_entity }
      end
    end
  end

  # DELETE /places/1
  # DELETE /places/1.json
  def destroy
    @place.destroy
    respond_to do |format|
      format.html { redirect_to places_url }
      format.json { head :no_content }
    end
  end

  private
    # Use callbacks to share common setup or constraints between actions.
    def set_place
      @place = Place.find_by_slug!(params[:id])
    end

    # Never trust parameters from the scary internet, only allow the white list through.
    def place_params
      params.require(:place).permit(:title, :slug, :user_id, :place_type_id, :content, :address, :place_photo, :longitude, :latitude, :subscribers_count, :subscribers_male, :subscribers_female, :mon_start, :mon_end, :tue_start, :tue_end, :wed_start, :wed_end, :thu_start, :thu_end, :fri_start, :fri_end, :sat_start, :sat_end, :sun_start, :sun_end, place_galleries_attributes: [:image, :id, :_destroy], jobs_attributes: [:content, :id])
    end
end
